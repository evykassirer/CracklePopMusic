{"version":3,"sources":["PitchPlayer.js","App.js","serviceWorker.js","index.js"],"names":["PitchPlayer","state","synth","multiVoiceSynth","tones","Tone","Synth","toMaster","2","PolySynth","3","this","setState","_this$state","number","props","randomToneIndex","Math","floor","random","length","pitches","push","triggerAttackRelease","playPitches","displayText","react_default","a","createElement","Component","App","incrementNumber","_this","setTimeout","inner","className","onClick","src_PitchPlayer","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iPA8FeA,6MA1FbC,MAAQ,CACNC,MAAO,KACPC,gBAAiB,QAgBnBC,MAAQ,CACN,KACA,KACA,KACA,KACA,KACA,KACA,KACA,yFApBA,IAAMF,GAAQ,IAAIG,IAAKC,OAAQC,WACzBJ,EAAkB,CACtBK,EAAG,IAAIH,IAAKI,UAAU,EAAGJ,IAAKC,OAAOC,WACrCG,EAAG,IAAIL,IAAKI,UAAU,EAAGJ,IAAKC,OAAOC,YAGvCI,KAAKC,SAAS,CACZV,QACAC,0DAeU,IAAAU,EACqBF,KAAKV,MAA/BC,EADKW,EACLX,MAAOC,EADFU,EACEV,gBAEd,GAAID,GAAUC,EAAd,CAHY,IAOJW,EAAWH,KAAKI,MAAhBD,OACFE,EAAkBC,KAAKC,MAAMD,KAAKE,SAAWR,KAAKP,MAAMgB,QACxDC,EAAU,CAACV,KAAKP,MAAMY,IAExBF,EAAS,IAAM,IACbE,EAAkB,EAAIL,KAAKP,MAAMgB,OACnCC,EAAQC,KAAKX,KAAKP,MAAMY,EAAkB,IAG1CK,EAAQC,KAAKX,KAAKP,MAAMY,EAAkB,KAI1CF,EAAS,IAAM,IACbE,EAAkB,EAAIL,KAAKP,MAAMgB,OACnCC,EAAQC,KAAKX,KAAKP,MAAMY,EAAkB,IAG1CK,EAAQC,KAAKX,KAAKP,MAAMY,EAAkB,KAI1CK,EAAQD,OAAS,EACnBjB,EAAgBkB,EAAQD,QAAQG,qBAAqBF,EAAS,MAG9DnB,EAAMqB,qBAAqBF,EAAQ,GAAI,wCAIlC,IACCP,EAAWH,KAAKI,MAAhBD,OAERH,KAAKa,cAEL,IAAIC,EAAc,GAWlB,OAVIX,EAAS,IAAM,IACjBW,GAAe,WAEbX,EAAS,IAAM,IACjBW,GAAe,OAEG,KAAhBA,IACFA,EAAcX,GAIdY,EAAAC,EAAAC,cAAA,WACGH,UArFiBI,aCuCXC,6MArCb7B,MAAQ,CACNa,OAAQ,KAGViB,gBAAkB,WAChB,IAAMjB,EAASkB,EAAK/B,MAAMa,OACtBA,EAAS,MACXkB,EAAKpB,SAAS,CACZE,OAAQA,EAAS,IAEnBmB,WAAWD,EAAKD,gBAAiB,+EAKnC,IAAIG,EAUJ,OAREA,EADwB,IAAtBvB,KAAKV,MAAMa,OACLY,EAAAC,EAAAC,cAAA,UAAQO,UAAU,cAAcC,QAASzB,KAAKoB,iBAA9C,kBAKAL,EAAAC,EAAAC,cAACS,EAAD,CAAavB,OAAQH,KAAKV,MAAMa,SAIxCY,EAAAC,EAAAC,cAAA,OAAKO,UAAU,OACbT,EAAAC,EAAAC,cAAA,UAAQO,UAAU,cAChBT,EAAAC,EAAAC,cAAA,SACGM,YA9BKL,aCQES,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOlB,EAAAC,EAAAC,cAACiB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.33e32fe2.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport Tone from 'tone'\n\nclass PitchPlayer extends Component {\n  state = {\n    synth: null,\n    multiVoiceSynth: null,\n  }\n\n  componentDidMount() {\n    const synth = new Tone.Synth().toMaster()\n    const multiVoiceSynth = {\n      2: new Tone.PolySynth(2, Tone.Synth).toMaster(),\n      3: new Tone.PolySynth(3, Tone.Synth).toMaster(),\n    }\n\n    this.setState({\n      synth,\n      multiVoiceSynth\n    })\n  }\n\n  tones = [\n    'C4',\n    'D4',\n    'E4',\n    'F4',\n    'G4',\n    'A4',\n    'B4',\n    'C5',\n  ]\n\n  playPitches() {\n    const {synth, multiVoiceSynth} = this.state;\n\n    if(!synth || !multiVoiceSynth) {\n      return\n    }\n\n    const { number } = this.props\n    const randomToneIndex = Math.floor(Math.random() * this.tones.length)\n    const pitches = [this.tones[randomToneIndex]]\n\n    if (number % 3 === 0) {\n      if (randomToneIndex + 2 < this.tones.length) {\n        pitches.push(this.tones[randomToneIndex + 2])\n      }\n      else {\n        pitches.push(this.tones[randomToneIndex - 2])\n      }\n    }\n\n    if (number % 5 === 0) {\n      if (randomToneIndex + 4 < this.tones.length) {\n        pitches.push(this.tones[randomToneIndex + 4])\n      }\n      else {\n        pitches.push(this.tones[randomToneIndex - 4])\n      }\n    }\n\n    if (pitches.length > 1) {\n      multiVoiceSynth[pitches.length].triggerAttackRelease(pitches, '2n')\n    }\n    else {\n      synth.triggerAttackRelease(pitches[0], '4n')\n    }\n  }\n\n  render() {\n    const { number } = this.props\n\n    this.playPitches()\n\n    let displayText = ''\n    if (number % 3 === 0) {\n      displayText += 'Crackle'\n    }\n    if (number % 5 === 0) {\n      displayText += 'Pop'\n    }\n    if (displayText === '') {\n      displayText = number\n    }\n\n    return (\n      <div>\n        {displayText}\n      </div>\n    );\n  }\n}\n\nexport default PitchPlayer;\n","import React, { Component } from 'react';\nimport './App.css';\nimport PitchPlayer from './PitchPlayer.js'\n\nclass App extends Component {\n  state = {\n    number: 0\n  }\n\n  incrementNumber = () => {\n    const number = this.state.number\n    if (number < 100) {\n      this.setState({\n        number: number + 1\n      })\n      setTimeout(this.incrementNumber, 1000)\n    }\n  }\n\n  render() {\n    let inner;\n    if (this.state.number === 0) {\n      inner = <button className=\"startButton\" onClick={this.incrementNumber}>\n        Click to start\n      </button>\n    }\n    else {\n      inner = <PitchPlayer number={this.state.number}/>\n    }\n\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <p>\n            {inner}\n          </p>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}